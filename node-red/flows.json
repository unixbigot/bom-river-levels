[
    {
        "id": "c129b430.c7968",
        "type": "tab",
        "label": "BNE Flood 2022",
        "disabled": false,
        "info": ""
    },
    {
        "id": "3349c9633602aad4",
        "type": "tab",
        "label": "BNE Central",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "803dd1d25b4c42da",
        "type": "tab",
        "label": "BNE North",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "07df741d7a2357de",
        "type": "tab",
        "label": "BNE South",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4739368b70d4798f",
        "type": "tab",
        "label": "Northern NSW",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9ae96e55.d824c8",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "Accelerando IoT lab River Flooding Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "true",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "c78be1d3.6b90c8",
        "type": "ftp",
        "host": "ftp.bom.gov.au",
        "port": "",
        "secureOptions": "",
        "user": "",
        "connTimeout": "",
        "pasvTimeout": "",
        "keepalive": ""
    },
    {
        "id": "2de7b7b7.42f87",
        "type": "ui_tab",
        "name": "BNE Flood Central",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "9137735d.313728",
        "type": "ui_group",
        "name": "Levels",
        "tab": "2de7b7b7.42f87",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "3be92f24.4ffb68",
        "type": "ui_group",
        "name": "Links to Charts",
        "tab": "2de7b7b7.42f87",
        "order": 3,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "58fc5d9.2ea9c24",
        "type": "ui_group",
        "name": "Summary",
        "tab": "2de7b7b7.42f87",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "7bc99b3be561fa59",
        "type": "ui_tab",
        "name": "BNE Flood North",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "233ce3554bcbb903",
        "type": "ui_tab",
        "name": "BNE Flood south",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "35a34f9cc41bbd9a",
        "type": "ui_tab",
        "name": "Northern NSW",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "2c08012178edc759",
        "type": "ui_group",
        "name": "Summary",
        "tab": "7bc99b3be561fa59",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f2f809aba890a601",
        "type": "ui_group",
        "name": "Levels",
        "tab": "7bc99b3be561fa59",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "78873e8d90834055",
        "type": "ui_group",
        "name": "Links",
        "tab": "7bc99b3be561fa59",
        "order": 3,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ba219f7f57a3f564",
        "type": "ui_group",
        "name": "Summary",
        "tab": "233ce3554bcbb903",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e141ba178624f840",
        "type": "ui_group",
        "name": "Levels",
        "tab": "233ce3554bcbb903",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "84c2ab1ae2f2a4ba",
        "type": "ui_group",
        "name": "Links",
        "tab": "233ce3554bcbb903",
        "order": 3,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b0c564550dd3f85e",
        "type": "ui_group",
        "name": "Summary",
        "tab": "35a34f9cc41bbd9a",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "dcc9482ea0d0d233",
        "type": "ui_group",
        "name": "Levels",
        "tab": "35a34f9cc41bbd9a",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "eced66951b74a1f2",
        "type": "ui_group",
        "name": "Links",
        "tab": "35a34f9cc41bbd9a",
        "order": 3,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "1658477eee628073",
        "type": "ui_tab",
        "name": "Update normal/peak values",
        "icon": "settings",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "596a9612c8348946",
        "type": "ui_group",
        "name": "Normal Levels",
        "tab": "1658477eee628073",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": true,
        "className": ""
    },
    {
        "id": "2d93686e2c48f818",
        "type": "ui_group",
        "name": "Peaks in 2011",
        "tab": "1658477eee628073",
        "order": 3,
        "disp": true,
        "width": "8",
        "collapse": true,
        "className": ""
    },
    {
        "id": "68bb0599ac0c4f35",
        "type": "ui_group",
        "name": "Peaks in 2022",
        "tab": "1658477eee628073",
        "order": 4,
        "disp": true,
        "width": "8",
        "collapse": true,
        "className": ""
    },
    {
        "id": "e41210e86fdb7d6a",
        "type": "ui_group",
        "name": "heading",
        "tab": "1658477eee628073",
        "order": 1,
        "disp": false,
        "width": "24",
        "collapse": false,
        "className": ""
    },
    {
        "id": "989ab9f6.67df38",
        "type": "ftp in",
        "z": "c129b430.c7968",
        "ftp": "c78be1d3.6b90c8",
        "operation": "get",
        "filename": "/anon/gen/fwo/IDQ60286.html",
        "localFilename": "/data/static/IDQ60286.html",
        "name": "Get River levels from BoM FTP",
        "x": 370,
        "y": 160,
        "wires": [
            [
                "56eca3a2e85b569e"
            ]
        ]
    },
    {
        "id": "21a93e50.23bc8a",
        "type": "inject",
        "z": "c129b430.c7968",
        "name": "Every 5 Mins",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 160,
        "wires": [
            [
                "989ab9f6.67df38",
                "e8a98209b3e807b2",
                "e7de195f651ca7ba"
            ]
        ]
    },
    {
        "id": "5223b61a.3e5718",
        "type": "split",
        "z": "c129b430.c7968",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1270,
        "y": 80,
        "wires": [
            [
                "19dfefe8.3df0c8"
            ]
        ]
    },
    {
        "id": "19dfefe8.3df0c8",
        "type": "switch",
        "z": "c129b430.c7968",
        "name": "Brisbane River metadata",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "<!-- METADATA,.*Brisbane",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1470,
        "y": 80,
        "wires": [
            [
                "d99193a3.870468"
            ]
        ]
    },
    {
        "id": "47afcfdf.443c4",
        "type": "debug",
        "z": "c129b430.c7968",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1450,
        "y": 120,
        "wires": []
    },
    {
        "id": "d99193a3.870468",
        "type": "function",
        "z": "c129b430.c7968",
        "name": "Strip html",
        "func": "msg.payload = msg.payload.replace(/.*METADATA,/,'').replace(/ *-->/,'');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 120,
        "wires": [
            [
                "47afcfdf.443c4"
            ]
        ]
    },
    {
        "id": "bfb05930.6521f",
        "type": "catch",
        "z": "c129b430.c7968",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 640,
        "y": 40,
        "wires": [
            [
                "b3a1decc.8fc8e8"
            ]
        ]
    },
    {
        "id": "b3a1decc.8fc8e8",
        "type": "debug",
        "z": "c129b430.c7968",
        "name": "Log Caught Error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 40,
        "wires": []
    },
    {
        "id": "fd18f887.ed63b",
        "type": "inject",
        "z": "c129b430.c7968",
        "name": "At startup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 80,
        "wires": [
            [
                "6c6238ff.13c1a8",
                "719b7075.932f78",
                "22c3301c5a88be02"
            ]
        ]
    },
    {
        "id": "6c6238ff.13c1a8",
        "type": "change",
        "z": "c129b430.c7968",
        "name": "Store records of 2011 peaks",
        "rules": [
            {
                "t": "set",
                "p": "peaks2011",
                "pt": "global",
                "to": "{\"Bremer R at Ipswich\":19.4,\"Brisbane R at Lowood Pump Stn\":22.87,\"Brisbane R at Mt Crosby\":26.18,\"Brisbane R at Moggill-1\":17.87,\"Brisbane R at Boat Ramp Park\":12.9,\"Brisbane R at City Gauge\":4.47}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "719b7075.932f78",
        "type": "change",
        "z": "c129b430.c7968",
        "name": "Store records of normal_levels",
        "rules": [
            {
                "t": "set",
                "p": "normal_levels",
                "pt": "global",
                "to": "{\"Brisbane R at Devon Hills\":0,\"Brisbane R at Gregor Ck-1\":0,\"Brisbane R at Gregor Ck-2\":0,\"Brisbane R at Gregor Ck *\":0,\"Brisbane R at Wivenhoe Dam HW\":65.8,\"Brisbane R at Wivenhoe Dam\":65.8,\"Brisbane R at Wivenhoe Dam TW\":27,\"Brisbane R at Lowood Pump Stn\":1,\"Brisbane R at Lowood\":1,\"Brisbane R at Burtons Br\":0.5,\"Brisbane R at Kholo Br\":0.5,\"Brisbane R at Mt Crosby\":7,\"Brisbane R at Colleges Crossing\":0,\"Brisbane R at Moggill-1\":1,\"Brisbane R at Moggill-2\":1,\"Brisbane R at Aitchenson St East\":0.5,\"Brisbane R at Goodna\":0.8,\"Brisbane R at Boat Ramp Park\":0.5,\"Brisbane R at St Lucia\":0.1,\"Brisbane R at Port Office\":0.1,\"Brisbane R at City Gauge\":0.1,\"Bremer R at Lower Mt Walker\":1,\"Bremer R at Rosewood\":1,\"Bremer R at Seven Mile Br\":30,\"Bremer R at Walloon *\":1.8,\"Bremer R at Walloon\":1.8,\"Bremer R at Three Mile Br\":10.2,\"Bremer R at Berrys Lagoon\":7.5,\"Bremer R at One Mile Br\":4.5,\"Bremer R at Hancocks Br Brassall\":1,\"Bremer R at Ipswich\":1,\"Bremer R at Karalee\":0,\"Oxley Ck at New Beith Rd Greenbank\":1,\"Oxley Ck at New Beith Rd Greenbank*\":1.5,\"Oxley Ck at Goodna Rd\":36.2,\"Oxley Ck at Johnson Road\":18.4,\"Oxley Ck at Beatty Rd Archerfield\":1.5,\"Oxley Ck at Corinda High\":0.25,\"Moggill Ck at Fortrose St Kenmore\":4,\"Moggill Ck at Upper Brookfield *\":0.6,\"Breakfast Ck at Bowen Hills Rail\":0.1,\"Bremer R at Berrys Lagoon - B\":7.5,\"Oxley Ck at Ipwsich Rd*\":0,\"Brisbane R at Linville *\":1,\"Brisbane R at Wivenhoe Dam HW *\":0,\"Brisbane R at Wivenhoe Dam TW *\":0,\"Brisbane R at Savages Crossing *\":1.5,\"Brisbane R at Mt Crosby *\":0,\"Bremer R at Spressers Br\":2,\"Bremer R at Berrys Lagoon *\":0,\"Bremer R at Five Mile Br\":2,\"Brisbane R at Savages Crossing\":0,\"Brisbane R at Jindalee Br\":0.1}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "22c3301c5a88be02",
        "type": "change",
        "z": "c129b430.c7968",
        "name": "Store records of 2022 peaks",
        "rules": [
            {
                "t": "set",
                "p": "peaks2022",
                "pt": "global",
                "to": "{\"Bremer R at Ipswich\":16.72,\"Brisbane R at City Gauge\":3.85,\"Brisbane R at Port Office\":3.96}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "56eca3a2e85b569e",
        "type": "debug",
        "z": "c129b430.c7968",
        "name": "ftp result",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 160,
        "wires": []
    },
    {
        "id": "e8a98209b3e807b2",
        "type": "ftp in",
        "z": "c129b430.c7968",
        "ftp": "c78be1d3.6b90c8",
        "operation": "get",
        "filename": "/anon/gen/fwo/IDQ60285.html",
        "localFilename": "/data/static/IDQ60285.html",
        "name": "Get River levels from BoM FTP",
        "x": 370,
        "y": 200,
        "wires": [
            [
                "56eca3a2e85b569e"
            ]
        ]
    },
    {
        "id": "e7de195f651ca7ba",
        "type": "ftp in",
        "z": "c129b430.c7968",
        "ftp": "c78be1d3.6b90c8",
        "operation": "get",
        "filename": "/anon/gen/fwo/IDN60140.html",
        "localFilename": "/data/static/IDN60140.html",
        "name": "Get River levels from BoM FTP",
        "x": 370,
        "y": 240,
        "wires": [
            [
                "56eca3a2e85b569e"
            ]
        ]
    },
    {
        "id": "fc0b6b40e295803c",
        "type": "ui_list",
        "z": "c129b430.c7968",
        "group": "596a9612c8348946",
        "name": "",
        "order": 1,
        "width": "8",
        "height": "8",
        "lineType": "three",
        "actionType": "click",
        "allowHTML": false,
        "outputs": 1,
        "topic": "",
        "x": 510,
        "y": 340,
        "wires": [
            [
                "27752edbb1be4211",
                "5581529b51f95dbd"
            ]
        ]
    },
    {
        "id": "3e1f1e0753a256a3",
        "type": "inject",
        "z": "c129b430.c7968",
        "name": "At startup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 340,
        "wires": [
            [
                "258bb414eea6f38b",
                "510b9bd0bb2a16b5",
                "33dafcec3caae7ad"
            ]
        ]
    },
    {
        "id": "258bb414eea6f38b",
        "type": "function",
        "z": "c129b430.c7968",
        "name": "List of normal levels",
        "func": "const levels = global.get('normal_levels') || {}\nmsg.payload = Object.keys(levels)\n    .sort()\n    .map(station=>({title:station, description:levels[station]}))\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 340,
        "wires": [
            [
                "fc0b6b40e295803c"
            ]
        ]
    },
    {
        "id": "50caa9bb72cb6d66",
        "type": "ui_text_input",
        "z": "c129b430.c7968",
        "name": "",
        "label": "Station name",
        "tooltip": "",
        "group": "596a9612c8348946",
        "order": 2,
        "width": "8",
        "height": "1",
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 270,
        "y": 380,
        "wires": [
            [
                "e8550bdc28c17e6d"
            ]
        ]
    },
    {
        "id": "9b49b79d45b3f542",
        "type": "ui_text_input",
        "z": "c129b430.c7968",
        "name": "",
        "label": "level",
        "tooltip": "",
        "group": "596a9612c8348946",
        "order": 3,
        "width": "4",
        "height": "1",
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 250,
        "y": 420,
        "wires": [
            [
                "e32a68e5b2298192"
            ]
        ]
    },
    {
        "id": "e8550bdc28c17e6d",
        "type": "change",
        "z": "c129b430.c7968",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "normal_station",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "e32a68e5b2298192",
        "type": "change",
        "z": "c129b430.c7968",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "normal_level",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "1851f422da6b3e24",
        "type": "ui_button",
        "z": "c129b430.c7968",
        "name": "",
        "group": "596a9612c8348946",
        "order": 3,
        "width": "4",
        "height": "1",
        "passthru": false,
        "label": "save",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "normal_level",
        "payloadType": "flow",
        "topic": "noromal_station",
        "topicType": "flow",
        "x": 250,
        "y": 460,
        "wires": [
            [
                "bb40fcf8b48d29f7",
                "53717f67c02dbfd8"
            ]
        ]
    },
    {
        "id": "bb40fcf8b48d29f7",
        "type": "function",
        "z": "c129b430.c7968",
        "name": "update normal_levels",
        "func": "const table = global.get(\"normal_levels\")\nconst stn = flow.get(\"normal_station\")\nconst lvl = flow.get(\"normal_level\")\nnode.warn(`normal level update stn=[${stn}] lvl=[${lvl}]`)\nif ((stn==\"\") || (lvl==\"\")) {\n    node.warn('no data')\n    return;\n}\n\ntable[stn]=lvl;\nglobal.set(\"normal_levels\",table)\n\nmsg.payload=table;\nmsg.filename=\"/data/static/normal_levels.json\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 460,
        "wires": [
            [
                "94b13bc6e5e8b651"
            ]
        ]
    },
    {
        "id": "27752edbb1be4211",
        "type": "change",
        "z": "c129b430.c7968",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.title",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 100,
        "y": 380,
        "wires": [
            [
                "50caa9bb72cb6d66"
            ]
        ]
    },
    {
        "id": "5581529b51f95dbd",
        "type": "change",
        "z": "c129b430.c7968",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.description",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 100,
        "y": 420,
        "wires": [
            [
                "9b49b79d45b3f542"
            ]
        ]
    },
    {
        "id": "64f3f6084d586680",
        "type": "file",
        "z": "c129b430.c7968",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 780,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "94b13bc6e5e8b651",
        "type": "json",
        "z": "c129b430.c7968",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 650,
        "y": 460,
        "wires": [
            [
                "64f3f6084d586680"
            ]
        ]
    },
    {
        "id": "c612401f1d2c90de",
        "type": "ui_list",
        "z": "c129b430.c7968",
        "group": "2d93686e2c48f818",
        "name": "",
        "order": 1,
        "width": "8",
        "height": "8",
        "lineType": "three",
        "actionType": "click",
        "allowHTML": false,
        "outputs": 1,
        "topic": "",
        "x": 510,
        "y": 560,
        "wires": [
            [
                "71e3791316d31dce",
                "ca2f9d8adc4425ab"
            ]
        ]
    },
    {
        "id": "510b9bd0bb2a16b5",
        "type": "function",
        "z": "c129b430.c7968",
        "name": "List of 2011 levels",
        "func": "const levels = global.get('peaks2011') || {}\nmsg.payload = Object.keys(levels)\n    .sort()\n    .map(station=>({title:station, description:levels[station]}))\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 560,
        "wires": [
            [
                "c612401f1d2c90de"
            ]
        ]
    },
    {
        "id": "01345569563bd328",
        "type": "ui_text_input",
        "z": "c129b430.c7968",
        "name": "",
        "label": "Station name",
        "tooltip": "",
        "group": "2d93686e2c48f818",
        "order": 2,
        "width": "8",
        "height": "1",
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 270,
        "y": 600,
        "wires": [
            [
                "99c08a51c22fc5b2"
            ]
        ]
    },
    {
        "id": "14575d32edb1e10f",
        "type": "ui_text_input",
        "z": "c129b430.c7968",
        "name": "",
        "label": "level",
        "tooltip": "",
        "group": "2d93686e2c48f818",
        "order": 3,
        "width": "4",
        "height": "1",
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 250,
        "y": 640,
        "wires": [
            [
                "c36c9d7782c14776"
            ]
        ]
    },
    {
        "id": "99c08a51c22fc5b2",
        "type": "change",
        "z": "c129b430.c7968",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "peaks2011_station",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "c36c9d7782c14776",
        "type": "change",
        "z": "c129b430.c7968",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "peaks2011_level",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "e9f864b6fe5c894d",
        "type": "ui_button",
        "z": "c129b430.c7968",
        "name": "",
        "group": "2d93686e2c48f818",
        "order": 3,
        "width": "4",
        "height": "1",
        "passthru": false,
        "label": "save",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "normal_level",
        "payloadType": "flow",
        "topic": "noromal_station",
        "topicType": "flow",
        "x": 250,
        "y": 680,
        "wires": [
            [
                "3a7d9024e4141d2c",
                "15b0dc2ceefb014c"
            ]
        ]
    },
    {
        "id": "3a7d9024e4141d2c",
        "type": "function",
        "z": "c129b430.c7968",
        "name": "update peaks2011",
        "func": "const table = global.get(\"peaks2011\")\nconst stn = flow.get(\"peaks2011_station\")\nconst lvl = flow.get(\"peaks2011_level\")\nnode.warn(`peaks2011 level update stn=[${stn}] lvl=[${lvl}]`)\nif ((stn==\"\") || (lvl==\"\")) {\n    node.warn('no data')\n    return;\n}\n\ntable[stn]=lvl;\nglobal.set(\"peaks2011\",table)\n\nmsg.payload=table;\nmsg.filename=\"/data/static/peaks2011_levels.json\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 680,
        "wires": [
            [
                "37bca28f6d113293"
            ]
        ]
    },
    {
        "id": "71e3791316d31dce",
        "type": "change",
        "z": "c129b430.c7968",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.title",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 100,
        "y": 600,
        "wires": [
            [
                "01345569563bd328"
            ]
        ]
    },
    {
        "id": "ca2f9d8adc4425ab",
        "type": "change",
        "z": "c129b430.c7968",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.description",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 100,
        "y": 640,
        "wires": [
            [
                "14575d32edb1e10f"
            ]
        ]
    },
    {
        "id": "d84154357a1cb128",
        "type": "file",
        "z": "c129b430.c7968",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 780,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "37bca28f6d113293",
        "type": "json",
        "z": "c129b430.c7968",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 650,
        "y": 680,
        "wires": [
            [
                "d84154357a1cb128"
            ]
        ]
    },
    {
        "id": "367767638814db8f",
        "type": "ui_list",
        "z": "c129b430.c7968",
        "group": "68bb0599ac0c4f35",
        "name": "",
        "order": 1,
        "width": "8",
        "height": "8",
        "lineType": "three",
        "actionType": "click",
        "allowHTML": false,
        "outputs": 1,
        "topic": "",
        "x": 510,
        "y": 740,
        "wires": [
            [
                "baba878682093075",
                "945befcf13337bdf"
            ]
        ]
    },
    {
        "id": "33dafcec3caae7ad",
        "type": "function",
        "z": "c129b430.c7968",
        "name": "List of 2022 levels",
        "func": "const levels = global.get('peaks2022') || {}\nmsg.payload = Object.keys(levels)\n    .sort()\n    .map(station=>({title:station, description:levels[station]}))\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 740,
        "wires": [
            [
                "367767638814db8f"
            ]
        ]
    },
    {
        "id": "f66287da83d4a6de",
        "type": "ui_text_input",
        "z": "c129b430.c7968",
        "name": "",
        "label": "Station name",
        "tooltip": "",
        "group": "68bb0599ac0c4f35",
        "order": 2,
        "width": "8",
        "height": "1",
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 270,
        "y": 780,
        "wires": [
            [
                "d6091cba32cfc143"
            ]
        ]
    },
    {
        "id": "cce5f7aa7a270821",
        "type": "ui_text_input",
        "z": "c129b430.c7968",
        "name": "",
        "label": "level",
        "tooltip": "",
        "group": "68bb0599ac0c4f35",
        "order": 3,
        "width": "4",
        "height": "1",
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 250,
        "y": 820,
        "wires": [
            [
                "f326eb38bae8460e"
            ]
        ]
    },
    {
        "id": "d6091cba32cfc143",
        "type": "change",
        "z": "c129b430.c7968",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "peaks2022_station",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "f326eb38bae8460e",
        "type": "change",
        "z": "c129b430.c7968",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "peaks2022_level",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "ec589ebf3bc40990",
        "type": "ui_button",
        "z": "c129b430.c7968",
        "name": "",
        "group": "68bb0599ac0c4f35",
        "order": 3,
        "width": "4",
        "height": "1",
        "passthru": false,
        "label": "save",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "normal_level",
        "payloadType": "flow",
        "topic": "noromal_station",
        "topicType": "flow",
        "x": 250,
        "y": 860,
        "wires": [
            [
                "aae22f64fa36b3fd",
                "19dcd95b95cda551"
            ]
        ]
    },
    {
        "id": "aae22f64fa36b3fd",
        "type": "function",
        "z": "c129b430.c7968",
        "name": "update peaks2022",
        "func": "const table = global.get(\"peaks2022\")\nconst stn = flow.get(\"peaks2022_station\")\nconst lvl = flow.get(\"peaks2022_level\")\nnode.warn(`peaks2022 level update stn=[${stn}] lvl=[${lvl}]`)\nif ((stn==\"\") || (lvl==\"\")) {\n    node.warn('no data')\n    return;\n}\n\ntable[stn]=lvl;\nglobal.set(\"peaks2022\",table)\n\nmsg.payload=table;\nmsg.filename=\"/data/static/peaks2022_levels.json\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 860,
        "wires": [
            [
                "fd1d5111b26f372c"
            ]
        ]
    },
    {
        "id": "baba878682093075",
        "type": "change",
        "z": "c129b430.c7968",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.title",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 100,
        "y": 780,
        "wires": [
            [
                "f66287da83d4a6de"
            ]
        ]
    },
    {
        "id": "945befcf13337bdf",
        "type": "change",
        "z": "c129b430.c7968",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.description",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 100,
        "y": 820,
        "wires": [
            [
                "cce5f7aa7a270821"
            ]
        ]
    },
    {
        "id": "c778462fb397bde8",
        "type": "file",
        "z": "c129b430.c7968",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 780,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "fd1d5111b26f372c",
        "type": "json",
        "z": "c129b430.c7968",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 650,
        "y": 860,
        "wires": [
            [
                "c778462fb397bde8"
            ]
        ]
    },
    {
        "id": "53717f67c02dbfd8",
        "type": "debug",
        "z": "c129b430.c7968",
        "name": "normal update",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 440,
        "y": 500,
        "wires": []
    },
    {
        "id": "15b0dc2ceefb014c",
        "type": "debug",
        "z": "c129b430.c7968",
        "name": "2011 update",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 440,
        "y": 700,
        "wires": []
    },
    {
        "id": "19dcd95b95cda551",
        "type": "debug",
        "z": "c129b430.c7968",
        "name": "2022 update",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 440,
        "y": 920,
        "wires": []
    },
    {
        "id": "0eda32316bc5d26a",
        "type": "inject",
        "z": "c129b430.c7968",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "<h2>Help improve this site</h2>Pick a station from one of the other tabs, and look up its normal or peak value from <a href=\"http://www.bom.gov.au/waterdata/\">http://www.bom.gov.au/waterdata/</a>, then enter the value here!",
        "payloadType": "str",
        "x": 130,
        "y": 980,
        "wires": [
            [
                "b89f6ba97c44fb4a"
            ]
        ]
    },
    {
        "id": "b89f6ba97c44fb4a",
        "type": "ui_template",
        "z": "c129b430.c7968",
        "group": "e41210e86fdb7d6a",
        "name": "",
        "order": 4,
        "width": "24",
        "height": "3",
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 280,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "fd2ce01bfa3f1541",
        "type": "file in",
        "z": "3349c9633602aad4",
        "name": "Read saved file",
        "filename": "/data/static/IDQ60286.html",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 340,
        "y": 160,
        "wires": [
            [
                "a9fcfc11f352ebed",
                "ab457bfa731a06cb"
            ]
        ]
    },
    {
        "id": "a9fcfc11f352ebed",
        "type": "function",
        "z": "3349c9633602aad4",
        "name": "Parse HTML with regex, oh the horrors",
        "func": "let lines = msg.payload.split('\\n');\n//node.warn(`Split input into ${lines.length} lines`)\nlet i = 0;\nlet count = lines.length;\nlet line = lines[0];\nlet output=[];\nlet stations = flow.get('stations')||{}\nlet station_filter = new RegExp(flow.get('station_filter')||'.')\nlet force = msg.force;\n\nfunction next() {\n    i = i+1;\n    let new_line = lines[i].replace(/ *<\\/?td> */g,'');\n    return new_line;\n}\n\nwhile (i < (count-1)) {\n\n    //node.warn('Consider line'+line)\n    //if (true) break;\n    if (!line.match(/METADATA/)) {\n        line = next();\n        continue;\n    }\n    if (!line.match(station_filter)) {\n        line= next();\n        continue;\n    }\n    line = line.replace(/^ *<!-- *METADATA,/,'').replace(/ *--> *$/,'');\n    //node.warn(`Found station [${line}]`);\n    let meta = line.split(/,/);\n    let payload = {\n        station: meta[10].replace(/ *#$/,''),\n        condition: meta[8],\n        metadata: meta,\n        url: `http://www.bom.gov.au/fwo/${meta[7]}/${meta[7]}.${meta[0]}.plt.shtml`\n    }\n\n//    line = unshift(lines).replace(/ *<\\/?td> */g,'');\n//    node.warn(`Parsing line [${line}]`);\n    payload.name=next().replace(/ *#$/,'');\n    payload.time=next();\n    payload.level=next();\n    payload.trend=next();\n    //node.warn(`Station payload ${JSON.stringify(payload)}`)\n\n    if (!force && stations[payload.station] && stations[payload.station].time==payload.time) {\n        // no change\n        line = next();\n        continue;\n    }\n    let topic = payload.name.replace(/Brisbane R at /,'');\n\n    node.send({topic, payload});\n    //output.push({...payload});\n    \n    stations[payload.name]={...payload};\n\n    next();   \n}\nflow.set('stations',stations)\nreturn(null);\n//node.warn(`output: ${JSON.stringify(output,null,'    ')}`)\n//return output;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 160,
        "wires": [
            [
                "7c6b0f36d86a312b",
                "3bc2316a92e808d7",
                "f5cc20d61b2d138d",
                "78c2d7fb2e2cbc97",
                "855c3b452052492e",
                "ba9f2f0ba80b8dc3"
            ]
        ]
    },
    {
        "id": "a9a2b0b02dbcc269",
        "type": "ui_list",
        "z": "3349c9633602aad4",
        "group": "9137735d.313728",
        "name": "List Brisbane river flood stations",
        "order": 5,
        "width": "8",
        "height": "20",
        "lineType": "two",
        "actionType": "none",
        "allowHTML": false,
        "outputs": 0,
        "topic": "",
        "x": 990,
        "y": 420,
        "wires": []
    },
    {
        "id": "7c6b0f36d86a312b",
        "type": "delay",
        "z": "3349c9633602aad4",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "outputs": 1,
        "x": 340,
        "y": 420,
        "wires": [
            [
                "faa27509a0ba6d5b",
                "6272c87e0c026ab7"
            ]
        ]
    },
    {
        "id": "faa27509a0ba6d5b",
        "type": "function",
        "z": "3349c9633602aad4",
        "name": "Update list of key Levels",
        "func": "const stations = flow.get('stations')||{};\nconst normal_levels = global.get('normal_levels')||{};\n\nconst all_stations = Object.values(stations)\n.filter(s=>!s.name.match(/Gregor|Devon/))\n.sort((a,b)=>(Number(a.level)>Number(b.level))?-1:((Number(a.level)<Number(b.level))?1:0));\n\nmsg.payload = all_stations.map(station=>{\n    let trend = station.trend;\n    if (normal_levels[station.name]) {\n        const diff = station.level - normal_levels[station.name];\n        if (diff > 0.2) {\n            const above = `${Number(diff).toFixed(1)}m above normal`\n            trend = `${trend}, ${above}`;\n        } else if (diff < -0.2) {\n            const below = `${Number(-diff).toFixed(1)}m below normal`\n            trend = `${trend}, ${below}`;\n        }\n    }\n    let item = {\n        title:station.name,\n        description:`${station.level}m (${trend}) at ${station.time}`,\n    };\n    if (station.trend == 'rising') item.icon_unicode='📈';\n    else if (station.trend == 'falling') item.icon_unicode='📉';\n    else if (station.trend == 'steady') item.icon_unicode='😬';\n    else item.icon_unicode = '🤷‍♂️';\n    return {...item};    \n});\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 420,
        "wires": [
            [
                "a9a2b0b02dbcc269"
            ]
        ]
    },
    {
        "id": "d120cf5003208681",
        "type": "inject",
        "z": "3349c9633602aad4",
        "name": "Manual refresh",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 480,
        "wires": [
            [
                "6272c87e0c026ab7",
                "faa27509a0ba6d5b"
            ]
        ]
    },
    {
        "id": "b6fc210dbb415859",
        "type": "ui_template",
        "z": "3349c9633602aad4",
        "group": "3be92f24.4ffb68",
        "name": "List of Links",
        "order": 0,
        "width": "8",
        "height": "20",
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 930,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "6272c87e0c026ab7",
        "type": "function",
        "z": "3349c9633602aad4",
        "name": "List of links to BoM charts",
        "func": "const stations = flow.get('stations')||{};\n\nconst all_stations = Object.values(stations)\n.filter(s=>!s.name.match(/Gregor|Devon/))\n.sort((a,b)=>(Number(a.level)>Number(b.level))?-1:((Number(a.level)<Number(b.level))?1:0));\nconst urls = all_stations.map(\n    station=>`<li><a href=\"${station.url}\">${station.name}</a></li>`\n);\n\nmsg.payload = `<ul>${urls.join(\"\\n\")}</ul>`;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 480,
        "wires": [
            [
                "b6fc210dbb415859",
                "54928a4c3e318488"
            ]
        ]
    },
    {
        "id": "3ea51dc7e5bbb70b",
        "type": "ui_chart",
        "z": "3349c9633602aad4",
        "name": "Graph River Levels (m)",
        "group": "58fc5d9.2ea9c24",
        "order": 7,
        "width": "8",
        "height": "5",
        "label": "River Levels (m)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "4",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 960,
        "y": 220,
        "wires": [
            [
                "680a20c5bb4bc7ab"
            ]
        ]
    },
    {
        "id": "7da89981c264c7ed",
        "type": "ui_chart",
        "z": "3349c9633602aad4",
        "name": "Graph Percent of 2011 level",
        "group": "58fc5d9.2ea9c24",
        "order": 6,
        "width": "8",
        "height": "5",
        "label": "Percent of 2011 level",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "4",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 980,
        "y": 280,
        "wires": [
            [
                "cebd3763061cac8a"
            ]
        ]
    },
    {
        "id": "1c9ece29eba6b390",
        "type": "change",
        "z": "3349c9633602aad4",
        "name": "get level",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.level",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 220,
        "wires": [
            [
                "3ea51dc7e5bbb70b"
            ]
        ]
    },
    {
        "id": "3bc2316a92e808d7",
        "type": "function",
        "z": "3349c9633602aad4",
        "name": "Compare level to 2011 records",
        "func": "const peaks2011 = global.get('peaks2011');\nconst station = msg.payload.name;\nif (!peaks2011[station]) return null;\n\nmsg.payload = Number(100 * Number(msg.payload.level) / peaks2011[station]).toFixed(1);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 280,
        "wires": [
            [
                "7da89981c264c7ed"
            ]
        ]
    },
    {
        "id": "f5cc20d61b2d138d",
        "type": "switch",
        "z": "3349c9633602aad4",
        "name": "Skip wivenhoe levels",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "Wivenhoe",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 360,
        "y": 220,
        "wires": [
            [],
            [
                "1c9ece29eba6b390"
            ]
        ]
    },
    {
        "id": "19b5fa8250f5d5cb",
        "type": "inject",
        "z": "3349c9633602aad4",
        "name": "Manual Refresh",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "force",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 120,
        "wires": [
            [
                "fd2ce01bfa3f1541"
            ]
        ]
    },
    {
        "id": "db8fba7e9e9d50e1",
        "type": "ui_text",
        "z": "3349c9633602aad4",
        "group": "58fc5d9.2ea9c24",
        "order": 2,
        "width": "6",
        "height": "3",
        "name": "text1",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 310,
        "y": 540,
        "wires": []
    },
    {
        "id": "45ccf60bb6f4c7ae",
        "type": "inject",
        "z": "3349c9633602aad4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "This is a temporary service from Accelerando.com.au.   We build IoT solutions, fast.  Got a suggestion?  Send to @unixbigot@aus.social on mastodon, or email contact@accelerando.com.au",
        "payloadType": "str",
        "x": 150,
        "y": 540,
        "wires": [
            [
                "db8fba7e9e9d50e1"
            ]
        ]
    },
    {
        "id": "96cd7ba7d740c65b",
        "type": "ui_text",
        "z": "3349c9633602aad4",
        "group": "58fc5d9.2ea9c24",
        "order": 3,
        "width": "6",
        "height": "3",
        "name": "text2",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 310,
        "y": 600,
        "wires": []
    },
    {
        "id": "7a03e044ba3acc3d",
        "type": "inject",
        "z": "3349c9633602aad4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "updated /5min.   Data are from http://www.bom.gov.au/cgi-bin/wrap_fwo.pl?IDQ60286.html, let me know if you want your waterway added.",
        "payloadType": "str",
        "x": 150,
        "y": 600,
        "wires": [
            [
                "96cd7ba7d740c65b"
            ]
        ]
    },
    {
        "id": "78c2d7fb2e2cbc97",
        "type": "function",
        "z": "3349c9633602aad4",
        "name": "Compare to normal level",
        "func": "const normal_levels = global.get('normal_levels');\nconst station = msg.payload.name;\nconst level = Number(msg.payload.level);\nif (!normal_levels[station]) return null;\nconst normal = Number(normal_levels[station]);\n//node.warn(`Normal level at ${station} is ${normal}, current is ${level}`);\nmsg.payload = Number( level - normal).toFixed(1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 380,
        "wires": [
            [
                "c944426a21053fc8"
            ]
        ]
    },
    {
        "id": "c944426a21053fc8",
        "type": "ui_chart",
        "z": "3349c9633602aad4",
        "name": "Above normal",
        "group": "58fc5d9.2ea9c24",
        "order": 5,
        "width": "8",
        "height": "5",
        "label": "Height above normal level",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "4",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 940,
        "y": 380,
        "wires": [
            [
                "9bfb8884f4187325"
            ]
        ]
    },
    {
        "id": "ab457bfa731a06cb",
        "type": "debug",
        "z": "3349c9633602aad4",
        "name": "data file",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 120,
        "wires": []
    },
    {
        "id": "855c3b452052492e",
        "type": "debug",
        "z": "3349c9633602aad4",
        "name": "level record",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 160,
        "wires": []
    },
    {
        "id": "54928a4c3e318488",
        "type": "debug",
        "z": "3349c9633602aad4",
        "name": "links",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 520,
        "wires": []
    },
    {
        "id": "0a6904b6c147c7af",
        "type": "ui_chart",
        "z": "3349c9633602aad4",
        "name": "Graph Percent of 2022 level",
        "group": "58fc5d9.2ea9c24",
        "order": 6,
        "width": "8",
        "height": "5",
        "label": "Percent of 2022 level",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "4",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 980,
        "y": 320,
        "wires": [
            [
                "9035b92d56c586b5"
            ]
        ]
    },
    {
        "id": "ba9f2f0ba80b8dc3",
        "type": "function",
        "z": "3349c9633602aad4",
        "name": "Compare level to 2022 records",
        "func": "const peaks2022 = global.get('peaks2022');\nconst station = msg.payload.name;\nif (!peaks2022[station]) return null;\n\nmsg.payload = Number(100 * Number(msg.payload.level) / peaks2022[station]).toFixed(1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 320,
        "wires": [
            [
                "0a6904b6c147c7af"
            ]
        ]
    },
    {
        "id": "d25a6e90bb3a276d",
        "type": "watch",
        "z": "3349c9633602aad4",
        "name": "/data/static/IDQ60286.html",
        "files": "/data/static/IDQ60286.html",
        "recursive": "",
        "x": 130,
        "y": 160,
        "wires": [
            [
                "fd2ce01bfa3f1541"
            ]
        ]
    },
    {
        "id": "bd38eb16f4725e7f",
        "type": "inject",
        "z": "3349c9633602aad4",
        "name": "at startup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 20,
        "wires": [
            [
                "bd1af17b6c32ca35"
            ]
        ]
    },
    {
        "id": "bd1af17b6c32ca35",
        "type": "change",
        "z": "3349c9633602aad4",
        "name": "set station filter",
        "rules": [
            {
                "t": "set",
                "p": "station_filter",
                "pt": "flow",
                "to": "(Brisbane|Bremer|Moggill|Wolston|Oxley|Breakfast|Moreton) (R|Ck|Bay) at",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 20,
        "wires": [
            []
        ]
    },
    {
        "id": "680a20c5bb4bc7ab",
        "type": "delay",
        "z": "3349c9633602aad4",
        "name": "1/5min",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1170,
        "y": 220,
        "wires": [
            [
                "c92ff085053b1809"
            ]
        ]
    },
    {
        "id": "c92ff085053b1809",
        "type": "file",
        "z": "3349c9633602aad4",
        "name": "persist central_levels.json",
        "filename": "/data/static/central_levels.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1370,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "cebd3763061cac8a",
        "type": "delay",
        "z": "3349c9633602aad4",
        "name": "1/5min",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1190,
        "y": 280,
        "wires": [
            [
                "8932273353f87907"
            ]
        ]
    },
    {
        "id": "9035b92d56c586b5",
        "type": "delay",
        "z": "3349c9633602aad4",
        "name": "1/5min",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1190,
        "y": 320,
        "wires": [
            [
                "53bc114d963d4b12"
            ]
        ]
    },
    {
        "id": "9bfb8884f4187325",
        "type": "delay",
        "z": "3349c9633602aad4",
        "name": "1/5min",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1190,
        "y": 380,
        "wires": [
            [
                "5cccf8ad8dbcb2fb"
            ]
        ]
    },
    {
        "id": "8932273353f87907",
        "type": "file",
        "z": "3349c9633602aad4",
        "name": "persist central_2011.json",
        "filename": "/data/static/central_2011.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1390,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "53bc114d963d4b12",
        "type": "file",
        "z": "3349c9633602aad4",
        "name": "persist central_2022.json",
        "filename": "/data/static/central_2022.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1390,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "5cccf8ad8dbcb2fb",
        "type": "file",
        "z": "3349c9633602aad4",
        "name": "persist central_normal.json",
        "filename": "/data/static/central_normal.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1400,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "32772e176023fb16",
        "type": "file in",
        "z": "803dd1d25b4c42da",
        "name": "Read saved file",
        "filename": "/data/static/IDQ60286.html",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 360,
        "y": 180,
        "wires": [
            [
                "7510b8cfca2cf629",
                "c7c76149d988d63d"
            ]
        ]
    },
    {
        "id": "7510b8cfca2cf629",
        "type": "function",
        "z": "803dd1d25b4c42da",
        "name": "Parse HTML with regex, oh the horrors",
        "func": "let lines = msg.payload.split('\\n');\n//node.warn(`Split input into ${lines.length} lines`)\nlet i = 0;\nlet count = lines.length;\nlet line = lines[0];\nlet output=[];\nlet stations = flow.get('stations')||{}\nlet station_filter = new RegExp(flow.get('station_filter')||'.')\nlet force = msg.force;\n\nfunction next() {\n    i = i+1;\n    let new_line = lines[i].replace(/ *<\\/?td> */g,'');\n    return new_line;\n}\n\nwhile (i < (count-1)) {\n\n    //node.warn('Consider line'+line)\n    //if (true) break;\n    if (!line.match(/METADATA/)) {\n        line = next();\n        continue;\n    }\n    if (!line.match(station_filter)) {\n        line= next();\n        continue;\n    }\n    line = line.replace(/^ *<!-- *METADATA,/,'').replace(/ *--> *$/,'');\n    //node.warn(`Found station [${line}]`);\n    let meta = line.split(/,/);\n    let payload = {\n        station: meta[10].replace(/ *#$/,''),\n        condition: meta[8],\n        metadata: meta,\n        url: `http://www.bom.gov.au/fwo/${meta[7]}/${meta[7]}.${meta[0]}.plt.shtml`\n    }\n\n//    line = unshift(lines).replace(/ *<\\/?td> */g,'');\n//    node.warn(`Parsing line [${line}]`);\n    payload.name=next().replace(/ *#$/,'');\n    payload.time=next();\n    payload.level=next();\n    payload.trend=next();\n    //node.warn(`Station payload ${JSON.stringify(payload)}`)\n\n    if (!force && stations[payload.station] && stations[payload.station].time==payload.time) {\n        // no change\n        line = next();\n        continue;\n    }\n    let topic = payload.name.replace(/Brisbane R at /,'');\n\n    node.send({topic, payload});\n    //output.push({...payload});\n    \n    stations[payload.name]={...payload};\n\n    next();   \n}\nflow.set('stations',stations)\nreturn(null);\n//node.warn(`output: ${JSON.stringify(output,null,'    ')}`)\n//return output;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 180,
        "wires": [
            [
                "55dd5a51d4b8dc96",
                "78976d2beae39c04",
                "0eebcd32bc84c4b5",
                "3cd5b938ded81ad9",
                "a2a5431830623e19",
                "40fea87560629b0d"
            ]
        ]
    },
    {
        "id": "f8f6433cf977baad",
        "type": "ui_list",
        "z": "803dd1d25b4c42da",
        "group": "f2f809aba890a601",
        "name": "List Brisbane river flood stations",
        "order": 5,
        "width": "8",
        "height": "20",
        "lineType": "two",
        "actionType": "none",
        "allowHTML": false,
        "outputs": 0,
        "topic": "",
        "x": 1010,
        "y": 440,
        "wires": []
    },
    {
        "id": "55dd5a51d4b8dc96",
        "type": "delay",
        "z": "803dd1d25b4c42da",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "outputs": 1,
        "x": 360,
        "y": 440,
        "wires": [
            [
                "04a43f1d61b6c60e",
                "4eea092444f4f99b"
            ]
        ]
    },
    {
        "id": "04a43f1d61b6c60e",
        "type": "function",
        "z": "803dd1d25b4c42da",
        "name": "Update list of key Levels",
        "func": "const stations = flow.get('stations')||{};\nconst normal_levels = global.get('normal_levels')||{};\n\nconst all_stations = Object.values(stations)\n.filter(s=>!s.name.match(/Gregor|Devon/))\n.sort((a,b)=>(Number(a.level)>Number(b.level))?-1:((Number(a.level)<Number(b.level))?1:0));\n\nmsg.payload = all_stations.map(station=>{\n    let trend = station.trend;\n    if (normal_levels[station.name]) {\n        const diff = station.level - normal_levels[station.name];\n        if (diff > 0.2) {\n            const above = `${Number(diff).toFixed(1)}m above normal`\n            trend = `${trend}, ${above}`;\n        } else if (diff < -0.2) {\n            const below = `${Number(-diff).toFixed(1)}m below normal`\n            trend = `${trend}, ${below}`;\n        }\n    }\n    let item = {\n        title:station.name,\n        description:`${station.level}m (${trend}) at ${station.time}`,\n    };\n    if (station.trend == 'rising') item.icon_unicode='📈';\n    else if (station.trend == 'falling') item.icon_unicode='📉';\n    else if (station.trend == 'steady') item.icon_unicode='😬';\n    else item.icon_unicode = '🤷‍♂️';\n    return {...item};    \n});\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 440,
        "wires": [
            [
                "f8f6433cf977baad"
            ]
        ]
    },
    {
        "id": "0722921085071aa2",
        "type": "inject",
        "z": "803dd1d25b4c42da",
        "name": "Manual refresh",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 500,
        "wires": [
            [
                "4eea092444f4f99b",
                "04a43f1d61b6c60e"
            ]
        ]
    },
    {
        "id": "abd8119db36ebb2a",
        "type": "ui_template",
        "z": "803dd1d25b4c42da",
        "group": "78873e8d90834055",
        "name": "List of Links",
        "order": 0,
        "width": "8",
        "height": "20",
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 950,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "4eea092444f4f99b",
        "type": "function",
        "z": "803dd1d25b4c42da",
        "name": "List of links to BoM charts",
        "func": "const stations = flow.get('stations')||{};\n\nconst all_stations = Object.values(stations)\n.filter(s=>!s.name.match(/Gregor|Devon/))\n.sort((a,b)=>(Number(a.level)>Number(b.level))?-1:((Number(a.level)<Number(b.level))?1:0));\nconst urls = all_stations.map(\n    station=>`<li><a href=\"${station.url}\">${station.name}</a></li>`\n);\n\nmsg.payload = `<ul>${urls.join(\"\\n\")}</ul>`;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 500,
        "wires": [
            [
                "abd8119db36ebb2a",
                "9ecebbdc4c0b8d62"
            ]
        ]
    },
    {
        "id": "078e03186a7b3d8f",
        "type": "ui_chart",
        "z": "803dd1d25b4c42da",
        "name": "Graph River Levels (m)",
        "group": "2c08012178edc759",
        "order": 7,
        "width": "8",
        "height": "5",
        "label": "River Levels (m)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "4",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 980,
        "y": 240,
        "wires": [
            [
                "04e401cfb79878cc"
            ]
        ]
    },
    {
        "id": "afe875b8f4862133",
        "type": "ui_chart",
        "z": "803dd1d25b4c42da",
        "name": "Graph Percent of 2011 level",
        "group": "2c08012178edc759",
        "order": 6,
        "width": "8",
        "height": "5",
        "label": "Percent of 2011 level",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "4",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1000,
        "y": 300,
        "wires": [
            [
                "abd75dcb1492162a"
            ]
        ]
    },
    {
        "id": "2fe6d44a56d57743",
        "type": "change",
        "z": "803dd1d25b4c42da",
        "name": "get level",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.level",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 240,
        "wires": [
            [
                "078e03186a7b3d8f"
            ]
        ]
    },
    {
        "id": "78976d2beae39c04",
        "type": "function",
        "z": "803dd1d25b4c42da",
        "name": "Compare level to 2011 records",
        "func": "const peaks2011 = global.get('peaks2011');\nconst station = msg.payload.name;\nif (!peaks2011[station]) return null;\n\nmsg.payload = Number(100 * Number(msg.payload.level) / peaks2011[station]).toFixed(1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 300,
        "wires": [
            [
                "afe875b8f4862133"
            ]
        ]
    },
    {
        "id": "0eebcd32bc84c4b5",
        "type": "switch",
        "z": "803dd1d25b4c42da",
        "name": "Skip wivenhoe levels",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "Wivenhoe",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 380,
        "y": 240,
        "wires": [
            [],
            [
                "2fe6d44a56d57743"
            ]
        ]
    },
    {
        "id": "3bf3b33b39643a8c",
        "type": "inject",
        "z": "803dd1d25b4c42da",
        "name": "Manual Refresh",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "force",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 140,
        "wires": [
            [
                "32772e176023fb16"
            ]
        ]
    },
    {
        "id": "51572897e4446b1a",
        "type": "ui_text",
        "z": "803dd1d25b4c42da",
        "group": "2c08012178edc759",
        "order": 2,
        "width": "6",
        "height": "3",
        "name": "text1",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 330,
        "y": 560,
        "wires": []
    },
    {
        "id": "5338d3f9cd4df9b0",
        "type": "inject",
        "z": "803dd1d25b4c42da",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "This is a temporary service from Accelerando.com.au.   We build IoT solutions, fast.  Got a suggestion?  Send to @unixbigot@aus.social on mastodon, or email contact@accelerando.com.au",
        "payloadType": "str",
        "x": 170,
        "y": 560,
        "wires": [
            [
                "51572897e4446b1a"
            ]
        ]
    },
    {
        "id": "01828408a34e5bc2",
        "type": "ui_text",
        "z": "803dd1d25b4c42da",
        "group": "2c08012178edc759",
        "order": 3,
        "width": "6",
        "height": "3",
        "name": "text2",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 330,
        "y": 620,
        "wires": []
    },
    {
        "id": "831a9335503f3bf2",
        "type": "inject",
        "z": "803dd1d25b4c42da",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "updated /5min.   Data are from http://www.bom.gov.au/cgi-bin/wrap_fwo.pl?IDQ60286.html, let me know if you want your waterway added.",
        "payloadType": "str",
        "x": 170,
        "y": 620,
        "wires": [
            [
                "01828408a34e5bc2"
            ]
        ]
    },
    {
        "id": "3cd5b938ded81ad9",
        "type": "function",
        "z": "803dd1d25b4c42da",
        "name": "Compare to normal level",
        "func": "const normal_levels = global.get('normal_levels');\nconst station = msg.payload.name;\nconst level = Number(msg.payload.level);\nif (!normal_levels[station]) return null;\nconst normal = Number(normal_levels[station]);\n//node.warn(`Normal level at ${station} is ${normal}, current is ${level}`);\nmsg.payload = Number( level - normal).toFixed(1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 400,
        "wires": [
            [
                "21daf38ab50170a3"
            ]
        ]
    },
    {
        "id": "21daf38ab50170a3",
        "type": "ui_chart",
        "z": "803dd1d25b4c42da",
        "name": "Above normal",
        "group": "2c08012178edc759",
        "order": 5,
        "width": "8",
        "height": "5",
        "label": "Height above normal level",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "4",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 960,
        "y": 400,
        "wires": [
            [
                "d6f2b4602c98aa6b"
            ]
        ]
    },
    {
        "id": "c7c76149d988d63d",
        "type": "debug",
        "z": "803dd1d25b4c42da",
        "name": "data file",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 140,
        "wires": []
    },
    {
        "id": "a2a5431830623e19",
        "type": "debug",
        "z": "803dd1d25b4c42da",
        "name": "level record",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 180,
        "wires": []
    },
    {
        "id": "9ecebbdc4c0b8d62",
        "type": "debug",
        "z": "803dd1d25b4c42da",
        "name": "links",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 540,
        "wires": []
    },
    {
        "id": "2cbba12ce9a22eee",
        "type": "ui_chart",
        "z": "803dd1d25b4c42da",
        "name": "Graph Percent of 2022 level",
        "group": "2c08012178edc759",
        "order": 6,
        "width": "8",
        "height": "5",
        "label": "Percent of 2022 level",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "4",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1000,
        "y": 340,
        "wires": [
            [
                "1a6afcc8be83f2e0"
            ]
        ]
    },
    {
        "id": "40fea87560629b0d",
        "type": "function",
        "z": "803dd1d25b4c42da",
        "name": "Compare level to 2022 records",
        "func": "const peaks2022 = global.get('peaks2022');\nconst station = msg.payload.name;\nif (!peaks2022[station]) return null;\n\nmsg.payload = Number(100 * Number(msg.payload.level) / peaks2022[station]).toFixed(1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 340,
        "wires": [
            [
                "2cbba12ce9a22eee"
            ]
        ]
    },
    {
        "id": "c8cbd537691bf7f9",
        "type": "watch",
        "z": "803dd1d25b4c42da",
        "name": "/data/static/IDQ60286.html",
        "files": "/data/static/IDQ60286.html",
        "recursive": "",
        "x": 150,
        "y": 180,
        "wires": [
            [
                "32772e176023fb16"
            ]
        ]
    },
    {
        "id": "ea9a4b411f353991",
        "type": "inject",
        "z": "803dd1d25b4c42da",
        "name": "at startup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 40,
        "wires": [
            [
                "f0516deca99bec83"
            ]
        ]
    },
    {
        "id": "f0516deca99bec83",
        "type": "change",
        "z": "803dd1d25b4c42da",
        "name": "set station filter",
        "rules": [
            {
                "t": "set",
                "p": "station_filter",
                "pt": "flow",
                "to": "(Pine|Caboolture|Enoggera|Kedron|Breakfast|Moreton) (R|Ck|Bk|Bay) at",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "04e401cfb79878cc",
        "type": "delay",
        "z": "803dd1d25b4c42da",
        "name": "1/5min",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1230,
        "y": 240,
        "wires": [
            [
                "e37da1c616036290"
            ]
        ]
    },
    {
        "id": "e37da1c616036290",
        "type": "file",
        "z": "803dd1d25b4c42da",
        "name": "persist north_levels.json",
        "filename": "/data/static/north_levels.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1430,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "abd75dcb1492162a",
        "type": "delay",
        "z": "803dd1d25b4c42da",
        "name": "1/5min",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1250,
        "y": 300,
        "wires": [
            [
                "aaded826c4be5279"
            ]
        ]
    },
    {
        "id": "1a6afcc8be83f2e0",
        "type": "delay",
        "z": "803dd1d25b4c42da",
        "name": "1/5min",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1250,
        "y": 340,
        "wires": [
            [
                "96a386da1967be0f"
            ]
        ]
    },
    {
        "id": "d6f2b4602c98aa6b",
        "type": "delay",
        "z": "803dd1d25b4c42da",
        "name": "1/5min",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1250,
        "y": 400,
        "wires": [
            [
                "fb2cca51f64b8425"
            ]
        ]
    },
    {
        "id": "aaded826c4be5279",
        "type": "file",
        "z": "803dd1d25b4c42da",
        "name": "persist north_2011.json",
        "filename": "/data/static/north_2011.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1450,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "96a386da1967be0f",
        "type": "file",
        "z": "803dd1d25b4c42da",
        "name": "persist north_2022.json",
        "filename": "/data/static/north_2022.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1450,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "fb2cca51f64b8425",
        "type": "file",
        "z": "803dd1d25b4c42da",
        "name": "persist north_normal.json",
        "filename": "/data/static/north_normal.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1450,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "5371435c8454b54b",
        "type": "file in",
        "z": "07df741d7a2357de",
        "name": "Read saved file",
        "filename": "/data/static/IDQ60285.html",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 320,
        "y": 200,
        "wires": [
            [
                "9634fcd788d7fe60",
                "67bd691bbc466c88"
            ]
        ]
    },
    {
        "id": "9634fcd788d7fe60",
        "type": "function",
        "z": "07df741d7a2357de",
        "name": "Parse HTML with regex, oh the horrors",
        "func": "let lines = msg.payload.split('\\n');\n//node.warn(`Split input into ${lines.length} lines`)\nlet i = 0;\nlet count = lines.length;\nlet line = lines[0];\nlet output=[];\nlet stations = flow.get('stations')||{}\nlet station_filter = new RegExp(flow.get('station_filter')||'.')\nlet force = msg.force;\n\nfunction next() {\n    i = i+1;\n    let new_line = lines[i].replace(/ *<\\/?td> */g,'');\n    return new_line;\n}\n\nwhile (i < (count-1)) {\n\n    //node.warn('Consider line'+line)\n    //if (true) break;\n    if (!line.match(/METADATA/)) {\n        line = next();\n        continue;\n    }\n    if (!line.match(station_filter)) {\n        line= next();\n        continue;\n    }\n    line = line.replace(/^ *<!-- *METADATA,/,'').replace(/ *--> *$/,'');\n    //node.warn(`Found station [${line}]`);\n    let meta = line.split(/,/);\n    let payload = {\n        station: meta[10].replace(/ *#$/,''),\n        condition: meta[8],\n        metadata: meta,\n        url: `http://www.bom.gov.au/fwo/${meta[7]}/${meta[7]}.${meta[0]}.plt.shtml`\n    }\n\n//    line = unshift(lines).replace(/ *<\\/?td> */g,'');\n//    node.warn(`Parsing line [${line}]`);\n    payload.name=next().replace(/ *#$/,'');\n    payload.time=next();\n    payload.level=next();\n    payload.trend=next();\n    //node.warn(`Station payload ${JSON.stringify(payload)}`)\n\n    if (!force && stations[payload.station] && stations[payload.station].time==payload.time) {\n        // no change\n        line = next();\n        continue;\n    }\n    let topic = payload.name.replace(/Brisbane R at /,'');\n\n    node.send({topic, payload});\n    //output.push({...payload});\n    \n    stations[payload.name]={...payload};\n\n    next();   \n}\nflow.set('stations',stations)\nreturn(null);\n//node.warn(`output: ${JSON.stringify(output,null,'    ')}`)\n//return output;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 200,
        "wires": [
            [
                "20ea7f595ba98191",
                "09b2f34ff520839f",
                "c4062a31c03fe13a",
                "bb8343e62fb3bc09",
                "d6b4fe41b89fc45f",
                "e852e3bacf036dae"
            ]
        ]
    },
    {
        "id": "24fb2eac83c89fb6",
        "type": "ui_list",
        "z": "07df741d7a2357de",
        "group": "e141ba178624f840",
        "name": "List Brisbane river flood stations",
        "order": 5,
        "width": "8",
        "height": "20",
        "lineType": "two",
        "actionType": "none",
        "allowHTML": false,
        "outputs": 0,
        "topic": "",
        "x": 970,
        "y": 460,
        "wires": []
    },
    {
        "id": "20ea7f595ba98191",
        "type": "delay",
        "z": "07df741d7a2357de",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "outputs": 1,
        "x": 320,
        "y": 460,
        "wires": [
            [
                "e7ab1119528c77db",
                "f84558173d8b621d"
            ]
        ]
    },
    {
        "id": "e7ab1119528c77db",
        "type": "function",
        "z": "07df741d7a2357de",
        "name": "Update list of key Levels",
        "func": "const stations = flow.get('stations')||{};\nconst normal_levels = global.get('normal_levels')||{};\n\nconst all_stations = Object.values(stations)\n.filter(s=>!s.name.match(/Gregor|Devon/))\n.sort((a,b)=>(Number(a.level)>Number(b.level))?-1:((Number(a.level)<Number(b.level))?1:0));\n\nmsg.payload = all_stations.map(station=>{\n    let trend = station.trend;\n    if (normal_levels[station.name]) {\n        const diff = station.level - normal_levels[station.name];\n        if (diff > 0.2) {\n            const above = `${Number(diff).toFixed(1)}m above normal`\n            trend = `${trend}, ${above}`;\n        } else if (diff < -0.2) {\n            const below = `${Number(-diff).toFixed(1)}m below normal`\n            trend = `${trend}, ${below}`;\n        }\n    }\n    let item = {\n        title:station.name,\n        description:`${station.level}m (${trend}) at ${station.time}`,\n    };\n    if (station.trend == 'rising') item.icon_unicode='📈';\n    else if (station.trend == 'falling') item.icon_unicode='📉';\n    else if (station.trend == 'steady') item.icon_unicode='😬';\n    else item.icon_unicode = '🤷‍♂️';\n    return {...item};    \n});\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 460,
        "wires": [
            [
                "24fb2eac83c89fb6"
            ]
        ]
    },
    {
        "id": "9f34649b2377a25c",
        "type": "inject",
        "z": "07df741d7a2357de",
        "name": "Manual refresh",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 520,
        "wires": [
            [
                "f84558173d8b621d",
                "e7ab1119528c77db"
            ]
        ]
    },
    {
        "id": "bcabbaf42809a1c8",
        "type": "ui_template",
        "z": "07df741d7a2357de",
        "group": "84c2ab1ae2f2a4ba",
        "name": "List of Links",
        "order": 0,
        "width": "8",
        "height": "20",
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 910,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "f84558173d8b621d",
        "type": "function",
        "z": "07df741d7a2357de",
        "name": "List of links to BoM charts",
        "func": "const stations = flow.get('stations')||{};\n\nconst all_stations = Object.values(stations)\n.filter(s=>!s.name.match(/Gregor|Devon/))\n.sort((a,b)=>(Number(a.level)>Number(b.level))?-1:((Number(a.level)<Number(b.level))?1:0));\nconst urls = all_stations.map(\n    station=>`<li><a href=\"${station.url}\">${station.name}</a></li>`\n);\n\nmsg.payload = `<ul>${urls.join(\"\\n\")}</ul>`;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 520,
        "wires": [
            [
                "bcabbaf42809a1c8",
                "687e956875a3eeb4"
            ]
        ]
    },
    {
        "id": "aacc06097078ffb3",
        "type": "ui_chart",
        "z": "07df741d7a2357de",
        "name": "Graph River Levels (m)",
        "group": "ba219f7f57a3f564",
        "order": 7,
        "width": "8",
        "height": "5",
        "label": "River Levels (m)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "4",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 940,
        "y": 260,
        "wires": [
            [
                "b76ef22ab28de933"
            ]
        ]
    },
    {
        "id": "6eea803c6d2784bc",
        "type": "ui_chart",
        "z": "07df741d7a2357de",
        "name": "Graph Percent of 2011 level",
        "group": "ba219f7f57a3f564",
        "order": 6,
        "width": "8",
        "height": "5",
        "label": "Percent of 2011 level",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "4",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 960,
        "y": 320,
        "wires": [
            [
                "c5ab6460c597af7e"
            ]
        ]
    },
    {
        "id": "5eedf82a87e76c58",
        "type": "change",
        "z": "07df741d7a2357de",
        "name": "get level",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.level",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 260,
        "wires": [
            [
                "aacc06097078ffb3"
            ]
        ]
    },
    {
        "id": "09b2f34ff520839f",
        "type": "function",
        "z": "07df741d7a2357de",
        "name": "Compare level to 2011 records",
        "func": "const peaks2011 = global.get('peaks2011');\nconst station = msg.payload.name;\nif (!peaks2011[station]) return null;\n\nmsg.payload = Number(100 * Number(msg.payload.level) / peaks2011[station]).toFixed(1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 320,
        "wires": [
            [
                "6eea803c6d2784bc"
            ]
        ]
    },
    {
        "id": "c4062a31c03fe13a",
        "type": "switch",
        "z": "07df741d7a2357de",
        "name": "Skip wivenhoe levels",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "Wivenhoe",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 340,
        "y": 260,
        "wires": [
            [],
            [
                "5eedf82a87e76c58"
            ]
        ]
    },
    {
        "id": "012557dfe10f9238",
        "type": "inject",
        "z": "07df741d7a2357de",
        "name": "Manual Refresh",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "force",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 160,
        "wires": [
            [
                "5371435c8454b54b"
            ]
        ]
    },
    {
        "id": "3fe3d010d20ceb11",
        "type": "ui_text",
        "z": "07df741d7a2357de",
        "group": "ba219f7f57a3f564",
        "order": 2,
        "width": "6",
        "height": "3",
        "name": "text1",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 290,
        "y": 580,
        "wires": []
    },
    {
        "id": "3555e8be98e0d391",
        "type": "inject",
        "z": "07df741d7a2357de",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "This is a temporary service from Accelerando.com.au.   We build IoT solutions, fast.  Got a suggestion?  Send to @unixbigot@aus.social on mastodon, or email contact@accelerando.com.au",
        "payloadType": "str",
        "x": 130,
        "y": 580,
        "wires": [
            [
                "3fe3d010d20ceb11"
            ]
        ]
    },
    {
        "id": "985f53ec7952e616",
        "type": "ui_text",
        "z": "07df741d7a2357de",
        "group": "ba219f7f57a3f564",
        "order": 3,
        "width": "6",
        "height": "3",
        "name": "text2",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 290,
        "y": 640,
        "wires": []
    },
    {
        "id": "2917f27bf30a0cb4",
        "type": "inject",
        "z": "07df741d7a2357de",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Updated /5min.  Data are from http://www.bom.gov.au/cgi-bin/wrap_fwo.pl?IDQ60285.html, let me know if you want your waterway added!",
        "payloadType": "str",
        "x": 130,
        "y": 640,
        "wires": [
            [
                "985f53ec7952e616"
            ]
        ]
    },
    {
        "id": "bb8343e62fb3bc09",
        "type": "function",
        "z": "07df741d7a2357de",
        "name": "Compare to normal level",
        "func": "const normal_levels = global.get('normal_levels');\nconst station = msg.payload.name;\nconst level = Number(msg.payload.level);\nif (!normal_levels[station]) return null;\nconst normal = Number(normal_levels[station]);\n//node.warn(`Normal level at ${station} is ${normal}, current is ${level}`);\nmsg.payload = Number( level - normal).toFixed(1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 420,
        "wires": [
            [
                "01019c77b3df318e"
            ]
        ]
    },
    {
        "id": "01019c77b3df318e",
        "type": "ui_chart",
        "z": "07df741d7a2357de",
        "name": "Above normal",
        "group": "ba219f7f57a3f564",
        "order": 5,
        "width": "8",
        "height": "5",
        "label": "Height above normal level",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "4",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 920,
        "y": 420,
        "wires": [
            [
                "b5e3830bcdb46393"
            ]
        ]
    },
    {
        "id": "67bd691bbc466c88",
        "type": "debug",
        "z": "07df741d7a2357de",
        "name": "data file",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 160,
        "wires": []
    },
    {
        "id": "d6b4fe41b89fc45f",
        "type": "debug",
        "z": "07df741d7a2357de",
        "name": "level record",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 200,
        "wires": []
    },
    {
        "id": "687e956875a3eeb4",
        "type": "debug",
        "z": "07df741d7a2357de",
        "name": "links",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 560,
        "wires": []
    },
    {
        "id": "5b6cecae0cad913e",
        "type": "ui_chart",
        "z": "07df741d7a2357de",
        "name": "Graph Percent of 2022 level",
        "group": "ba219f7f57a3f564",
        "order": 6,
        "width": "8",
        "height": "5",
        "label": "Percent of 2022 level",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "4",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 960,
        "y": 360,
        "wires": [
            [
                "bb8853b28b344285"
            ]
        ]
    },
    {
        "id": "e852e3bacf036dae",
        "type": "function",
        "z": "07df741d7a2357de",
        "name": "Compare level to 2022 records",
        "func": "const peaks2022 = global.get('peaks2022');\nconst station = msg.payload.name;\nif (!peaks2022[station]) return null;\n\nmsg.payload = Number(100 * Number(msg.payload.level) / peaks2022[station]).toFixed(1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 360,
        "wires": [
            [
                "5b6cecae0cad913e"
            ]
        ]
    },
    {
        "id": "1d367e6868b5320c",
        "type": "watch",
        "z": "07df741d7a2357de",
        "name": "/data/static/IDQ60285.html",
        "files": "/data/static/IDQ60285.html",
        "recursive": "",
        "x": 110,
        "y": 200,
        "wires": [
            [
                "5371435c8454b54b"
            ]
        ]
    },
    {
        "id": "e1fccc8c04b0f88e",
        "type": "inject",
        "z": "07df741d7a2357de",
        "name": "at startup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 60,
        "wires": [
            [
                "f0a8ae7254d44e9b"
            ]
        ]
    },
    {
        "id": "f0a8ae7254d44e9b",
        "type": "change",
        "z": "07df741d7a2357de",
        "name": "set station filter",
        "rules": [
            {
                "t": "set",
                "p": "station_filter",
                "pt": "flow",
                "to": " (R|Bay) at",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 260,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "b76ef22ab28de933",
        "type": "delay",
        "z": "07df741d7a2357de",
        "name": "1/5min",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1210,
        "y": 260,
        "wires": [
            [
                "cd1e6880985f7904"
            ]
        ]
    },
    {
        "id": "cd1e6880985f7904",
        "type": "file",
        "z": "07df741d7a2357de",
        "name": "persist south_levels.json",
        "filename": "/data/static/south_levels.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1410,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "c5ab6460c597af7e",
        "type": "delay",
        "z": "07df741d7a2357de",
        "name": "1/5min",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1230,
        "y": 320,
        "wires": [
            [
                "2471b041f39133b8"
            ]
        ]
    },
    {
        "id": "bb8853b28b344285",
        "type": "delay",
        "z": "07df741d7a2357de",
        "name": "1/5min",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1230,
        "y": 360,
        "wires": [
            [
                "b9cdf3e2b435409b"
            ]
        ]
    },
    {
        "id": "b5e3830bcdb46393",
        "type": "delay",
        "z": "07df741d7a2357de",
        "name": "1/5min",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1230,
        "y": 420,
        "wires": [
            [
                "393065b4aeb8b549"
            ]
        ]
    },
    {
        "id": "2471b041f39133b8",
        "type": "file",
        "z": "07df741d7a2357de",
        "name": "persist south_2011.json",
        "filename": "/data/static/south_2011.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1430,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "b9cdf3e2b435409b",
        "type": "file",
        "z": "07df741d7a2357de",
        "name": "persist south_2022.json",
        "filename": "/data/static/south_2022.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1430,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "393065b4aeb8b549",
        "type": "file",
        "z": "07df741d7a2357de",
        "name": "persist south_normal.json",
        "filename": "/data/static/south_normal.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1430,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "5d358ce531b6cdee",
        "type": "file in",
        "z": "4739368b70d4798f",
        "name": "Read saved file",
        "filename": "/data/static/IDN60140.html",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 380,
        "y": 220,
        "wires": [
            [
                "cf4a6738101063a6",
                "9b3ce0a4b2e29758"
            ]
        ]
    },
    {
        "id": "cf4a6738101063a6",
        "type": "function",
        "z": "4739368b70d4798f",
        "name": "Parse HTML with regex, oh the horrors",
        "func": "let lines = msg.payload.split('\\n');\n//node.warn(`Split input into ${lines.length} lines`)\nlet i = 0;\nlet count = lines.length;\nlet line = lines[0];\nlet output=[];\nlet stations = flow.get('stations')||{}\nlet station_filter = new RegExp(flow.get('station_filter')||'.')\nlet force = msg.force;\n\nfunction next() {\n    i = i+1;\n    let new_line = lines[i].replace(/ *<\\/?td> */g,'');\n    return new_line;\n}\n\nwhile (i < (count-1)) {\n\n    //node.warn('Consider line'+line)\n    //if (true) break;\n    if (!line.match(/METADATA/)) {\n        line = next();\n        continue;\n    }\n    if (!line.match(station_filter)) {\n        line= next();\n        continue;\n    }\n    line = line.replace(/^ *<!-- *METADATA,/,'').replace(/ *--> *$/,'');\n    //node.warn(`Found station [${line}]`);\n    let meta = line.split(/,/);\n    let payload = {\n        station: meta[10].replace(/ *#$/,''),\n        condition: meta[8],\n        metadata: meta,\n        url: `http://www.bom.gov.au/fwo/${meta[7]}/${meta[7]}.${meta[0]}.plt.shtml`\n    }\n\n//    line = unshift(lines).replace(/ *<\\/?td> */g,'');\n//    node.warn(`Parsing line [${line}]`);\n    payload.name=next().replace(/ *#$/,'');\n    payload.time=next();\n    payload.level=next();\n    payload.trend=next();\n    //node.warn(`Station payload ${JSON.stringify(payload)}`)\n\n    if (!force && stations[payload.station] && stations[payload.station].time==payload.time) {\n        // no change\n        line = next();\n        continue;\n    }\n    let topic = payload.name.replace(/Brisbane R at /,'');\n\n    node.send({topic, payload});\n    //output.push({...payload});\n    \n    stations[payload.name]={...payload};\n\n    next();   \n}\nflow.set('stations',stations)\nreturn(null);\n//node.warn(`output: ${JSON.stringify(output,null,'    ')}`)\n//return output;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 220,
        "wires": [
            [
                "456de46cde4f5c4d",
                "2407cbde530d17f2",
                "cb1de2149174f000",
                "16873a4fc945a9ee",
                "3f0b52039cfba46b",
                "845f38dd739f589a"
            ]
        ]
    },
    {
        "id": "b67ea86413ea65c4",
        "type": "ui_list",
        "z": "4739368b70d4798f",
        "group": "dcc9482ea0d0d233",
        "name": "List Brisbane river flood stations",
        "order": 5,
        "width": "8",
        "height": "20",
        "lineType": "two",
        "actionType": "none",
        "allowHTML": false,
        "outputs": 0,
        "topic": "",
        "x": 1030,
        "y": 480,
        "wires": []
    },
    {
        "id": "456de46cde4f5c4d",
        "type": "delay",
        "z": "4739368b70d4798f",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "outputs": 1,
        "x": 380,
        "y": 480,
        "wires": [
            [
                "6bc2544bbfab6808",
                "df30c1e824d3770d"
            ]
        ]
    },
    {
        "id": "6bc2544bbfab6808",
        "type": "function",
        "z": "4739368b70d4798f",
        "name": "Update list of key Levels",
        "func": "const stations = flow.get('stations')||{};\nconst normal_levels = global.get('normal_levels')||{};\n\nconst all_stations = Object.values(stations)\n.filter(s=>!s.name.match(/Gregor|Devon/))\n.sort((a,b)=>(Number(a.level)>Number(b.level))?-1:((Number(a.level)<Number(b.level))?1:0));\n\nmsg.payload = all_stations.map(station=>{\n    let trend = station.trend;\n    if (normal_levels[station.name]) {\n        const diff = station.level - normal_levels[station.name];\n        if (diff > 0.2) {\n            const above = `${Number(diff).toFixed(1)}m above normal`\n            trend = `${trend}, ${above}`;\n        } else if (diff < -0.2) {\n            const below = `${Number(-diff).toFixed(1)}m below normal`\n            trend = `${trend}, ${below}`;\n        }\n    }\n    let item = {\n        title:station.name,\n        description:`${station.level}m (${trend}) at ${station.time}`,\n    };\n    if (station.trend == 'rising') item.icon_unicode='📈';\n    else if (station.trend == 'falling') item.icon_unicode='📉';\n    else if (station.trend == 'steady') item.icon_unicode='😬';\n    else item.icon_unicode = '🤷‍♂️';\n    return {...item};    \n});\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 480,
        "wires": [
            [
                "b67ea86413ea65c4"
            ]
        ]
    },
    {
        "id": "cf7afcd87284b83c",
        "type": "inject",
        "z": "4739368b70d4798f",
        "name": "Manual refresh",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 540,
        "wires": [
            [
                "df30c1e824d3770d",
                "6bc2544bbfab6808"
            ]
        ]
    },
    {
        "id": "d75276c4b7ecbe87",
        "type": "ui_template",
        "z": "4739368b70d4798f",
        "group": "eced66951b74a1f2",
        "name": "List of Links",
        "order": 0,
        "width": "8",
        "height": "20",
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 970,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "df30c1e824d3770d",
        "type": "function",
        "z": "4739368b70d4798f",
        "name": "List of links to BoM charts",
        "func": "const stations = flow.get('stations')||{};\n\nconst all_stations = Object.values(stations)\n.filter(s=>!s.name.match(/Gregor|Devon/))\n.sort((a,b)=>(Number(a.level)>Number(b.level))?-1:((Number(a.level)<Number(b.level))?1:0));\nconst urls = all_stations.map(\n    station=>`<li><a href=\"${station.url}\">${station.name}</a></li>`\n);\n\nmsg.payload = `<ul>${urls.join(\"\\n\")}</ul>`;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 540,
        "wires": [
            [
                "d75276c4b7ecbe87",
                "4113f2aa8fb640a7"
            ]
        ]
    },
    {
        "id": "d3aabac744b2fb5e",
        "type": "ui_chart",
        "z": "4739368b70d4798f",
        "name": "Graph River Levels (m)",
        "group": "b0c564550dd3f85e",
        "order": 7,
        "width": "8",
        "height": "5",
        "label": "River Levels (m)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "4",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1000,
        "y": 280,
        "wires": [
            [
                "4be16413211c065b"
            ]
        ]
    },
    {
        "id": "9b3f56b512e971f7",
        "type": "ui_chart",
        "z": "4739368b70d4798f",
        "name": "Graph Percent of 2011 level",
        "group": "b0c564550dd3f85e",
        "order": 6,
        "width": "8",
        "height": "5",
        "label": "Percent of 2011 level",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "4",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1020,
        "y": 340,
        "wires": [
            [
                "b2a249512421104c"
            ]
        ]
    },
    {
        "id": "f0c3c953cca827aa",
        "type": "change",
        "z": "4739368b70d4798f",
        "name": "get level",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.level",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 280,
        "wires": [
            [
                "d3aabac744b2fb5e"
            ]
        ]
    },
    {
        "id": "2407cbde530d17f2",
        "type": "function",
        "z": "4739368b70d4798f",
        "name": "Compare level to 2011 records",
        "func": "const peaks2011 = global.get('peaks2011');\nconst station = msg.payload.name;\nif (!peaks2011[station]) return null;\n\nmsg.payload = Number(100 * Number(msg.payload.level) / peaks2011[station]).toFixed(1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 340,
        "wires": [
            [
                "9b3f56b512e971f7"
            ]
        ]
    },
    {
        "id": "cb1de2149174f000",
        "type": "switch",
        "z": "4739368b70d4798f",
        "name": "Skip wivenhoe levels",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "Wivenhoe",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 400,
        "y": 280,
        "wires": [
            [],
            [
                "f0c3c953cca827aa"
            ]
        ]
    },
    {
        "id": "c6e3e7354c1a5cbb",
        "type": "inject",
        "z": "4739368b70d4798f",
        "name": "Manual Refresh",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "force",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 180,
        "wires": [
            [
                "5d358ce531b6cdee"
            ]
        ]
    },
    {
        "id": "3562bf7d45a22e88",
        "type": "ui_text",
        "z": "4739368b70d4798f",
        "group": "b0c564550dd3f85e",
        "order": 2,
        "width": "6",
        "height": "3",
        "name": "text1",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 350,
        "y": 600,
        "wires": []
    },
    {
        "id": "5d5c6abaf9efc758",
        "type": "inject",
        "z": "4739368b70d4798f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "This is a temporary service from Accelerando.com.au.   We build IoT solutions, fast.  Got a suggestion?  Send to @unixbigot@aus.social on mastodon, or email contact@accelerando.com.au",
        "payloadType": "str",
        "x": 190,
        "y": 600,
        "wires": [
            [
                "3562bf7d45a22e88"
            ]
        ]
    },
    {
        "id": "c6bb71372e87bfc4",
        "type": "ui_text",
        "z": "4739368b70d4798f",
        "group": "b0c564550dd3f85e",
        "order": 3,
        "width": "6",
        "height": "3",
        "name": "text2",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 350,
        "y": 660,
        "wires": []
    },
    {
        "id": "e546d4c6f0e2f38a",
        "type": "inject",
        "z": "4739368b70d4798f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Updated /5min.  Data are from http://www.bom.gov.au/cgi-bin/wrap_fwo.pl?IDN60140.html, let me know if you want your waterway added!",
        "payloadType": "str",
        "x": 190,
        "y": 660,
        "wires": [
            [
                "c6bb71372e87bfc4"
            ]
        ]
    },
    {
        "id": "16873a4fc945a9ee",
        "type": "function",
        "z": "4739368b70d4798f",
        "name": "Compare to normal level",
        "func": "const normal_levels = global.get('normal_levels');\nconst station = msg.payload.name;\nconst level = Number(msg.payload.level);\nif (!normal_levels[station]) return null;\nconst normal = Number(normal_levels[station]);\n//node.warn(`Normal level at ${station} is ${normal}, current is ${level}`);\nmsg.payload = Number( level - normal).toFixed(1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 440,
        "wires": [
            [
                "b7797a5856955c45"
            ]
        ]
    },
    {
        "id": "b7797a5856955c45",
        "type": "ui_chart",
        "z": "4739368b70d4798f",
        "name": "Above normal",
        "group": "b0c564550dd3f85e",
        "order": 5,
        "width": "8",
        "height": "5",
        "label": "Height above normal level",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "4",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 980,
        "y": 440,
        "wires": [
            [
                "c50329ac0d31a6af"
            ]
        ]
    },
    {
        "id": "9b3ce0a4b2e29758",
        "type": "debug",
        "z": "4739368b70d4798f",
        "name": "data file",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 180,
        "wires": []
    },
    {
        "id": "3f0b52039cfba46b",
        "type": "debug",
        "z": "4739368b70d4798f",
        "name": "level record",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 220,
        "wires": []
    },
    {
        "id": "4113f2aa8fb640a7",
        "type": "debug",
        "z": "4739368b70d4798f",
        "name": "links",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 580,
        "wires": []
    },
    {
        "id": "5c9b173303f2e7ee",
        "type": "ui_chart",
        "z": "4739368b70d4798f",
        "name": "Graph Percent of 2022 level",
        "group": "b0c564550dd3f85e",
        "order": 6,
        "width": "8",
        "height": "5",
        "label": "Percent of 2022 level",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "4",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1020,
        "y": 380,
        "wires": [
            [
                "7d7f1661b91cf1e8"
            ]
        ]
    },
    {
        "id": "845f38dd739f589a",
        "type": "function",
        "z": "4739368b70d4798f",
        "name": "Compare level to 2022 records",
        "func": "const peaks2022 = global.get('peaks2022');\nconst station = msg.payload.name;\nif (!peaks2022[station]) return null;\n\nmsg.payload = Number(100 * Number(msg.payload.level) / peaks2022[station]).toFixed(1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 380,
        "wires": [
            [
                "5c9b173303f2e7ee"
            ]
        ]
    },
    {
        "id": "7d7d62c7fbb68f72",
        "type": "watch",
        "z": "4739368b70d4798f",
        "name": "/data/static/IDN60140.html",
        "files": "/data/static/IDN60140.html",
        "recursive": "",
        "x": 170,
        "y": 220,
        "wires": [
            [
                "5d358ce531b6cdee"
            ]
        ]
    },
    {
        "id": "1745b17c24484003",
        "type": "inject",
        "z": "4739368b70d4798f",
        "name": "at startup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 80,
        "wires": [
            [
                "53f2a6cf1ae277b2"
            ]
        ]
    },
    {
        "id": "53f2a6cf1ae277b2",
        "type": "change",
        "z": "4739368b70d4798f",
        "name": "set station filter",
        "rules": [
            {
                "t": "set",
                "p": "station_filter",
                "pt": "flow",
                "to": " (R|Bay) at",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "4be16413211c065b",
        "type": "delay",
        "z": "4739368b70d4798f",
        "name": "1/5min",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1270,
        "y": 280,
        "wires": [
            [
                "a8573cc3c986280b"
            ]
        ]
    },
    {
        "id": "a8573cc3c986280b",
        "type": "file",
        "z": "4739368b70d4798f",
        "name": "persist nsw_levels.json",
        "filename": "/data/static/nsw_levels.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1460,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "b2a249512421104c",
        "type": "delay",
        "z": "4739368b70d4798f",
        "name": "1/5min",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1290,
        "y": 340,
        "wires": [
            [
                "136bfdfa09586afc"
            ]
        ]
    },
    {
        "id": "7d7f1661b91cf1e8",
        "type": "delay",
        "z": "4739368b70d4798f",
        "name": "1/5min",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1290,
        "y": 380,
        "wires": [
            [
                "4583d11935a491bd"
            ]
        ]
    },
    {
        "id": "c50329ac0d31a6af",
        "type": "delay",
        "z": "4739368b70d4798f",
        "name": "1/5min",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1290,
        "y": 440,
        "wires": [
            [
                "90bd61c323873908"
            ]
        ]
    },
    {
        "id": "136bfdfa09586afc",
        "type": "file",
        "z": "4739368b70d4798f",
        "name": "persist nsw_2011.json",
        "filename": "/data/static/nsw_2011.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1480,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "4583d11935a491bd",
        "type": "file",
        "z": "4739368b70d4798f",
        "name": "persist nsw_2022.json",
        "filename": "/data/static/nsw_2022.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1480,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "90bd61c323873908",
        "type": "file",
        "z": "4739368b70d4798f",
        "name": "persist nsw_normal.json",
        "filename": "/data/static/nsw_normal.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1490,
        "y": 440,
        "wires": [
            []
        ]
    }
]